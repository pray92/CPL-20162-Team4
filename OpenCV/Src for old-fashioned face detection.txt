	CvCapture* capture = cvCreateCameraCapture(0);
	IplImage* camera = cvQueryFrame(capture);
	IplImage* gray = cvCreateImage(cvGetSize(camera), camera->depth, 1);
	IplImage* eye = cvCreateImage(cvSize(160, 160), camera->depth, 1);

	cv::CascadeClassifier face_cascade; /*= (CvHaarClassifierCascade*)cvLoad("haarcascade_frontalface_alt2.xml", 0, 0, 0);*/
	if (face_cascade.load("haarcascade_frontalface_alt2.xml"))
	{
		std::cerr << "Error : Face cascade error!" << std::endl;
		return;
	}

	CvHaarClassifierCascade* eye_cascade = (CvHaarClassifierCascade*)cvLoad("haarcascade_eye.xml", 0, 0, 0);
	if (!eye_cascade)
	{
		std::cerr << "Error : Eye cascade error!" << std::endl;
		return;
	}

	CvMemStorage* storage1 = cvCreateMemStorage(0);
	CvMemStorage* storage2 = cvCreateMemStorage(0);
	cvNamedWindow("ORG");

	while (1)
	{
		if (cvWaitKey(10) == 27)
			break;
		
		camera = cvQueryFrame(capture);
		cvCvtColor(camera, gray, CV_BGR2GRAY);
		cvShowImage("ORG", camera);

		CvSeq* faces = cvHaarDetectObjects(gray, face_cascade, storage1, 2.0, 1, 0, cvSize(100, 100), cvSize(300, 300));
		CvSeq* eyes = cvHaarDetectObjects(gray, eye_cascade, storage2, 2.0, 1, 0, cvSize(40, 40), cvSize(60, 60));

		for (auto i = 0; i < face_cascade.total; ++i)
		{
			CvRect* face_region = 0;
			face_region = (CvRect*)cvGetSeqElem(faces, i);

			cvRectangle(camera, cvPoint(face_region->x, face_region->y),
				cvPoint(face_region->x + face_region->width, face_region->y + face_region->height),
				cvScalar(255, 255, 255), 1, CV_AA, 0);

			for (auto j = 0; j < eyes->total; ++j)
			{
				CvRect* eye_region = 0;
				eye_region = (CvRect*)cvGetSeqElem(eyes, j);

				if ((eye_region->x > face_region->x) && (eye_region->x < (face_region->x + face_region->width)) &&
					(eye_region->y > face_region->y) && (eye_region->y < face_region->y + (face_region->height / 2)))
				{
					cvRectangle(camera, cvPoint(eye_region->x, eye_region->y), 
								cvPoint(eye_region->x + eye_region->width, eye_region->y + eye_region->height),
								cvScalar(255, 255, 255), 1, CV_AA, 0);

					cvDrawLine(camera, cvPoint(face_region->x, face_region->y),
								cvPoint(eye_region->x, eye_region->y),
								cvScalar(0, 0, 255), 1);
					cvDrawLine(camera, cvPoint(face_region->x, face_region->y),
								cvPoint(eye_region->x + eye_region->width, eye_region->y + eye_region->height),
								cvScalar(0, 0, 255), 1);
					cvDrawLine(camera, cvPoint(face_region->x, face_region->y),
						cvPoint(eye_region->x + eye_region->width, eye_region->y),
						cvScalar(0, 0, 255), 1);
					cvDrawLine(camera, cvPoint(face_region->x, face_region->y),
						cvPoint(eye_region->x, eye_region->y + eye_region->height),
						cvScalar(0, 0, 255), 1);

					cvDrawLine(camera, cvPoint(face_region->x, face_region->y + face_region->height),
						cvPoint(eye_region->x, eye_region->y),
						cvScalar(0, 255, 0), 1);
					cvDrawLine(camera, cvPoint(face_region->x, face_region->y + face_region->height),
						cvPoint(eye_region->x + eye_region->width, eye_region->y + eye_region->height),
						cvScalar(0, 255, 0), 1);
					cvDrawLine(camera, cvPoint(face_region->x, face_region->y + face_region->height),
						cvPoint(eye_region->x + eye_region->width, eye_region->y),
						cvScalar(0, 255, 0), 1);
					cvDrawLine(camera, cvPoint(face_region->x, face_region->y + face_region->height),
						cvPoint(eye_region->x, eye_region->y + eye_region->height),
						cvScalar(0, 255, 0), 1);


					cvDrawLine(camera, cvPoint(face_region->x + face_region->width, face_region->y), 
						cvPoint(eye_region->x, eye_region->y), 
						cvScalar(255, 0, 0), 1);
					cvDrawLine(camera, cvPoint(face_region->x + face_region->width, face_region->y), 
						cvPoint(eye_region->x + eye_region->width, eye_region->y + eye_region->height), 
						cvScalar(255, 0, 0), 1);
					cvDrawLine(camera, cvPoint(face_region->x + face_region->width, face_region->y), 
						cvPoint(eye_region->x + eye_region->width, eye_region->y), 
						cvScalar(255, 0, 0), 1);
					cvDrawLine(camera, cvPoint(face_region->x + face_region->width, face_region->y), 
						cvPoint(eye_region->x, eye_region->y + eye_region->height), 
						cvScalar(255, 0, 0), 1);



					cvDrawLine(camera, cvPoint(face_region->x + face_region->width, 
						face_region->y + face_region->width), cvPoint(eye_region->x, eye_region->y), 
						cvScalar(0, 0, 0), 1);
					cvDrawLine(camera, cvPoint(face_region->x + face_region->width, 
						face_region->y + face_region->width), cvPoint(eye_region->x + eye_region->width, eye_region->y + eye_region->height), 
						cvScalar(0, 0, 0), 1);
					cvDrawLine(camera, cvPoint(face_region->x + face_region->width, 
						face_region->y + face_region->width), cvPoint(eye_region->x + eye_region->width, eye_region->y), 
						cvScalar(0, 0, 0), 1);
					cvDrawLine(camera, cvPoint(face_region->x + face_region->width, face_region->y + face_region->width), 
						cvPoint(eye_region->x, eye_region->y + eye_region->height), 
						cvScalar(0, 0, 0), 1);
				}
			}
		}

		cvShowImage("ORG", camera);
	}

	cvReleaseMemStorage(&storage1);
	cvReleaseMemStorage(&storage2);
	cvReleaseImage(&gray);
	cvReleaseCapture(&capture);